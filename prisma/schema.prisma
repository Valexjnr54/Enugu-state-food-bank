generator client {
  provider        = "prisma-client-js"
  output          = "../src/models"
  previewFeatures = ["relationJoins"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model admin {
  id            Int         @id @default(autoincrement())
  firstname     String
  lastname      String
  email         String      @unique
  username      String      @unique
  role          Role        @default(super_admin)
  profile_image String?
  password      String
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  order_note    OrderNote[]
}

model Product {
  id            String           @id @default(uuid())
  name          String
  description   String?
  slug          String           @unique
  brand         String?
  product_image String?
  image         Json?
  basePrice     Float
  currency      String           @default("NGN")
  isPerishable  Boolean          @default(false)
  shelfLifeDays Int?
  unit          Unit             @default(PIECE)
  packageType   String?
  active        Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  categoryId    String?
  cart_items    CartItem[]
  order_items   OrderItem[]
  category      Category?        @relation(fields: [categoryId], references: [id])
  variants      ProductVariant[]
  wishlist      WishlistItem[]

  @@index([categoryId], map: "Product_categoryId_fkey")
}

model ProductVariant {
  id          String         @id @default(uuid())
  sku         String         @unique
  name        String
  netWeight   Float?
  price       Float
  currency    String         @default("NGN")
  image       String?
  attribute   Json?
  expiryDate  DateTime?
  productId   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  cart_items  CartItem[]
  inventory   Inventory?
  order_items OrderItem[]
  product     Product        @relation(fields: [productId], references: [id])
  wishlist    WishlistItem[]

  @@index([productId], map: "ProductVariant_productId_fkey")
}

model Inventory {
  id            String         @id @default(uuid())
  variantId     String         @unique
  quantity      Int
  lowStockLevel Int            @default(10)
  batchNumber   String?
  warehouseId   String?
  updatedAt     DateTime       @updatedAt
  variant       ProductVariant @relation(fields: [variantId], references: [id])
  warehouse     Warehouse?     @relation(fields: [warehouseId], references: [id])

  @@index([warehouseId], map: "Inventory_warehouseId_fkey")
}

model Category {
  id       String     @id @default(uuid())
  name     String
  slug     String     @unique
  parentId String?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@index([parentId], map: "Category_parentId_fkey")
}

model Warehouse {
  id          String      @id @default(uuid())
  name        String
  address     String?
  city        String?
  country     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  inventories Inventory[]
}

model User {
  id                    String         @id @default(uuid())
  firstname             String
  lastname              String
  email                 String?        @unique
  phone                 String         @unique
  level                 String
  employee_id           String         @unique
  government_entity     String
  salary_per_month      Float
  loan_unit             Float
  loan_amount_collected Float          @default(0)
  is_address_set        Boolean        @default(false)
  password              String?
  otp                   Int?
  role                  Role           @default(user)
  profile_image         String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  addresses             Address[]
  cart_items            CartItem[]
  orders                Order[]
  wishlist              WishlistItem[]
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  label     String
  street    String
  city      String
  state     String
  country   String
  zipCode   String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  order     Order[]

  @@index([userId], map: "Address_userId_fkey")
}

model Order {
  id              String          @id @default(uuid())
  userId          String
  addressId       String
  totalAmount     Float
  currency        String          @default("NGN")
  paymentStatus   PaymentStatus   @default(PENDING)
  orderStatus     OrderStatus     @default(PENDING)
  trackingCode    String?         @unique
  placedAt        DateTime        @default(now())
  deliveredAt     DateTime?
  cancelledAt     DateTime?
  updatedAt       DateTime        @updatedAt
  couponId        String?
  discount        Float           @default(0)
  address         Address         @relation(fields: [addressId], references: [id])
  coupon          Coupon?         @relation(fields: [couponId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
  items           OrderItem[]
  order_note      OrderNote[]
  trackingUpdates OrderTracking[]
  payment         Payment?

  @@index([addressId], map: "Order_addressId_fkey")
  @@index([couponId], map: "Order_couponId_fkey")
  @@index([userId], map: "Order_userId_fkey")
}

model OrderItem {
  id        String          @id @default(uuid())
  orderId   String
  variantId String?
  quantity  Int
  unitPrice Float
  currency  String          @default("NGN")
  total     Float
  productId String?
  order     Order           @relation(fields: [orderId], references: [id])
  Product   Product?        @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
  @@index([variantId], map: "OrderItem_variantId_fkey")
}

model OrderTracking {
  id        String      @id @default(uuid())
  orderId   String
  status    OrderStatus
  message   String?
  location  String?
  updatedAt DateTime    @default(now())
  order     Order       @relation(fields: [orderId], references: [id])

  @@index([orderId], map: "OrderTracking_orderId_fkey")
}

model OrderNote {
  id        String   @id @default(uuid())
  orderId   String
  adminId   Int?
  note      String
  createdAt DateTime @default(now())
  admin     admin?   @relation(fields: [adminId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])

  @@index([adminId], map: "OrderNote_adminId_fkey")
  @@index([orderId], map: "OrderNote_orderId_fkey")
}

model Coupon {
  id             String       @id @default(uuid())
  code           String       @unique
  description    String?
  discountType   DiscountType
  discountValue  Float
  minOrderAmount Float?
  maxDiscount    Float?
  isActive       Boolean      @default(true)
  startsAt       DateTime?
  expiresAt      DateTime?
  usageLimit     Int?
  usedCount      Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  orders         Order[]
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String        @unique
  amount    Float
  currency  String        @default("NGN")
  provider  String
  reference String        @unique
  status    PaymentStatus @default(PENDING)
  paidAt    DateTime?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  order     Order         @relation(fields: [orderId], references: [id])
}

model CartItem {
  id        String          @id @default(uuid())
  userId    String
  productId String?
  variantId String?
  quantity  Int             @default(1)
  addedAt   DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  product   Product?        @relation(fields: [productId], references: [id])
  user      User            @relation(fields: [userId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([productId], map: "CartItem_productId_fkey")
  @@index([userId], map: "CartItem_userId_fkey")
  @@index([variantId], map: "CartItem_variantId_fkey")
}

model WishlistItem {
  id        String          @id @default(uuid())
  userId    String
  productId String?
  variantId String?
  addedAt   DateTime        @default(now())
  product   Product?        @relation(fields: [productId], references: [id])
  user      User            @relation(fields: [userId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([productId], map: "WishlistItem_productId_fkey")
  @@index([userId], map: "WishlistItem_userId_fkey")
  @@index([variantId], map: "WishlistItem_variantId_fkey")
}

enum Unit {
  KG
  GRAM
  LITER
  ML
  PIECE
  PACK
  BOTTLE
  CAN
}

enum Role {
  super_admin
  user
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}
