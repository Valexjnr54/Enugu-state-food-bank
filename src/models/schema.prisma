// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/models"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model admin {
  id            Int      @id @default(autoincrement())
  firstname     String
  lastname      String
  email         String   @unique
  username      String   @unique
  role          Role     @default(super_admin)
  profile_image String?
  password      String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  order_note OrderNote[]
}

model Product {
  id            String   @id @default(uuid())
  name          String
  description   String?
  slug          String   @unique
  brand         String?
  product_image String?
  images        Json? // URLs
  basePrice     Float // Base price before variants or quantity
  currency      String   @default("NGN")
  isPerishable  Boolean  @default(false)
  shelfLifeDays Int? // Optional, how long before expiry
  unit          Unit     @default(PIECE)
  packageType   String? // e.g. "Box", "Bag", "Bottle"
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  variants ProductVariant[]
}

model ProductVariant {
  id         String    @id @default(uuid())
  sku        String    @unique
  name       String
  netWeight  Float? // e.g. 1.5 (kg), 500 (ml)
  price      Float
  currency   String    @default("NGN")
  image      String?
  attributes Json? // e.g. {"flavor": "Vanilla", "size": "500ml"}
  expiryDate DateTime? // For perishable items
  productId  String
  product    Product   @relation(fields: [productId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  inventory Inventory?

  order_items OrderItem[]
  cart_items  CartItem[]
  wishlist    WishlistItem[]
}

model Inventory {
  id            String         @id @default(uuid())
  variantId     String         @unique
  variant       ProductVariant @relation(fields: [variantId], references: [id])
  quantity      Int
  lowStockLevel Int            @default(10)
  batchNumber   String? // For traceability
  warehouseId   String?
  warehouse     Warehouse?     @relation(fields: [warehouseId], references: [id])
  updatedAt     DateTime       @updatedAt
}

model Category {
  id       String     @id @default(uuid())
  name     String
  slug     String     @unique
  parentId String?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  products Product[]
}

model Warehouse {
  id        String   @id @default(uuid())
  name      String
  address   String?
  city      String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventories Inventory[]
}

model User {
  id                    String         @id @default(uuid())
  firstname             String
  lastname              String
  email                 String?        @unique
  phone                 String         @unique
  level                 String
  employee_id           String         @unique
  government_entity     String
  salary_per_month      Float
  loan_unit             Float
  loan_amount_collected Float          @default(0)
  is_address_set        Boolean        @default(false)
  password              String?
  otp                   Int?
  role                  Role           @default(user)
  profile_image         String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  orders                Order[]
  addresses             Address[]
  cart_items            CartItem[]
  wishlist              WishlistItem[]
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  label     String // e.g. "Home", "Office"
  street    String
  city      String
  state     String
  country   String
  zipCode   String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order[]
}

model Order {
  id              String          @id @default(uuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  addressId       String
  address         Address         @relation(fields: [addressId], references: [id])
  totalAmount     Float
  currency        String          @default("NGN")
  paymentStatus   PaymentStatus   @default(PENDING)
  orderStatus     OrderStatus     @default(PENDING)
  trackingCode    String?         @unique
  placedAt        DateTime        @default(now())
  deliveredAt     DateTime?
  cancelledAt     DateTime?
  updatedAt       DateTime        @updatedAt
  items           OrderItem[]
  trackingUpdates OrderTracking[]
  payment         Payment?
  order_note      OrderNote[]
  couponId        String?
  coupon          Coupon?         @relation(fields: [couponId], references: [id])
  discount        Float           @default(0)
}

model OrderItem {
  id        String         @id @default(uuid())
  orderId   String
  order     Order          @relation(fields: [orderId], references: [id])
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  quantity  Int
  unitPrice Float // Price at time of order
  currency  String         @default("NGN")
  total     Float
}

model OrderTracking {
  id        String      @id @default(uuid())
  orderId   String
  order     Order       @relation(fields: [orderId], references: [id])
  status    OrderStatus
  message   String?
  location  String?
  updatedAt DateTime    @default(now())
}

model OrderNote {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  adminId   Int?
  admin     admin?   @relation(fields: [adminId], references: [id])
  note      String
  createdAt DateTime @default(now())
}

model Coupon {
  id             String       @id @default(uuid())
  code           String       @unique
  description    String?
  discountType   DiscountType // PERCENTAGE or FIXED
  discountValue  Float
  minOrderAmount Float?
  maxDiscount    Float?
  isActive       Boolean      @default(true)
  startsAt       DateTime?
  expiresAt      DateTime?
  usageLimit     Int? // Total allowed usage
  usedCount      Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  orders         Order[]
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String        @unique
  order     Order         @relation(fields: [orderId], references: [id])
  amount    Float
  currency  String        @default("NGN")
  provider  String // e.g. "Paystack", "Flutterwave"
  reference String        @unique
  status    PaymentStatus @default(PENDING)
  paidAt    DateTime?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model CartItem {
  id        String         @id @default(uuid())
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  quantity  Int            @default(1)
  addedAt   DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id        String         @id @default(uuid())
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  addedAt   DateTime       @default(now())
}

enum Unit {
  KG
  GRAM
  LITER
  ML
  PIECE
  PACK
  BOTTLE
  CAN
}

enum Role {
  super_admin
  user
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}
